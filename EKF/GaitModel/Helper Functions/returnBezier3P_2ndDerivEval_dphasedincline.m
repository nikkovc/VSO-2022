function bezier2ndDerivCoeffs3P = returnBezier3P_2ndDerivEval_dphasedincline(phase,stepLength,incline)
    

inclineFuncs = returnBezierLinear(incline);
 stepLengthFuncs = returnDerivBezierQuadratic(stepLength);
 phaseFuncs = returnBezierDerivCubic(phase);
 
 numInclineFuncs = length(inclineFuncs);
 numStepLengthFuncs = length(stepLengthFuncs);
 numPhaseFuncs = length(phaseFuncs);
    
 bezier2ndDerivCoeffs3P = zeros(1,numInclineFuncs*numStepLengthFuncs*numPhaseFuncs);
 N=1;
 for ii = 1:numInclineFuncs
     inclineFunc = inclineFuncs(ii);
     
     for jj = 1:numStepLengthFuncs
         stepLengthFunc = stepLengthFuncs(jj);
         
         for kk = 1:numPhaseFuncs
             phaseFunc = phaseFuncs(kk);
             bezier2ndDerivCoeffs3P(N) = inclineFunc * stepLengthFunc * phaseFunc;
             N = N + 1;
         end
         
     end
     
 end
 
%  
%  bezier2ndDerivCoeffs3P = [...
%      (1).*stepLength.*-3*(1-phase)^2,...
%      (1).*stepLength.* (3*(1-phase)^2 - 6*(1 - phase)*phase), ...
%      (1).*stepLength.*(6*(1 - phase)*phase - 3*phase^2),...
%      (1).*stepLength.*3*phase^2,...
%      (1).*(1 - stepLength).*-3*(1-phase)^2, ...
%      (1).*(1 - stepLength).*(3*(1-phase)^2 - 6*(1 - phase)*phase), ...
%      (1).*(1 - stepLength).* (6*(1 - phase)*phase - 3*phase^2),...
%      (1).*(1 - stepLength).*3*phase^2,...
%      (-1).*stepLength.*-3*(1-phase)^2,...
%      (-1).*stepLength.* (3*(1-phase)^2 - 6*(1 - phase)*phase), ...
%      (-1).*stepLength.*(6*(1 - phase)*phase - 3*phase^2),...
%      (-1).*stepLength.*3*phase^2,...
%      (-1).*(1 - stepLength).*-3*(1-phase)^2, ...
%      (-1).*(1 - stepLength).*(3*(1-phase)^2 - 6*(1 - phase)*phase), ...
%      (-1).*(1 - stepLength).* (6*(1 - phase)*phase - 3*phase^2),...
%      (-1).*(1 - stepLength).*3*phase^2 ...
%      ];

end
